The ``7-base_geometry`` module
============================

Using ``BaseGeometry``
----------------------

This is an example text file in reStructuredText format. First import
``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

Basic instantiation:

    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

Test area() method (should raise Exception):

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Test integer_validator() with valid integers:

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("height", 1)

Test integer_validator() with string:

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

Test integer_validator() with zero:

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

Test integer_validator() with negative number:

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

Test integer_validator() with float:

    >>> bg.integer_validator("average", 3.14)
    Traceback (most recent call last):
    TypeError: average must be an integer

Test integer_validator() with None:

    >>> bg.integer_validator("value", None)
    Traceback (most recent call last):
    TypeError: value must be an integer

Test integer_validator() with list:

    >>> bg.integer_validator("list", [1, 2, 3])
    Traceback (most recent call last):
    TypeError: list must be an integer

Test integer_validator() with tuple:

    >>> bg.integer_validator("tuple", (1, 2))
    Traceback (most recent call last):
    TypeError: tuple must be an integer

Test integer_validator() with dict:

    >>> bg.integer_validator("dict", {"key": "value"})
    Traceback (most recent call last):
    TypeError: dict must be an integer

Test integer_validator() with set:

    >>> bg.integer_validator("set", {1, 2, 3})
    Traceback (most recent call last):
    TypeError: set must be an integer

Test integer_validator() with boolean True:

    >>> bg.integer_validator("bool", True)
    Traceback (most recent call last):
    TypeError: bool must be an integer

Test integer_validator() with boolean False:

    >>> bg.integer_validator("bool", False)
    Traceback (most recent call last):
    TypeError: bool must be an integer

Test integer_validator() with large positive integer:

    >>> bg.integer_validator("big_num", 999999999)

Test integer_validator() with large negative integer:

    >>> bg.integer_validator("big_neg", -999999999)
    Traceback (most recent call last):
    ValueError: big_neg must be greater than 0

Test integer_validator() with empty string as name:

    >>> bg.integer_validator("", 5)

Test integer_validator() with very long name:

    >>> bg.integer_validator("very_very_very_long_parameter_name", 42)

Test integer_validator() with special characters in name:

    >>> bg.integer_validator("param@#$", 10)

Test area() method can be called multiple times:

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Test with no arguments to integer_validator:

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test with only one argument to integer_validator:

    >>> bg.integer_validator("name")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Test with too many arguments to integer_validator:

    >>> bg.integer_validator("name", 5, "extra")
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

Test area() with arguments:

    >>> bg.area(5)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

Test integer_validator with mixed types:

    >>> bg.integer_validator("mixed", "123")
    Traceback (most recent call last):
    TypeError: mixed must be an integer

Test integer_validator with complex number:

    >>> bg.integer_validator("complex", 1+2j)
    Traceback (most recent call last):
    TypeError: complex must be an integer

Test integer_validator with bytes:

    >>> bg.integer_validator("bytes", b"hello")
    Traceback (most recent call last):
    TypeError: bytes must be an integer
