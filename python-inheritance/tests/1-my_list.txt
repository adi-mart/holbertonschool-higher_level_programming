The ``1-my_list`` module
======================

Using ``MyList``
----------------

This is an example text file in reStructuredText format. First import
``MyList`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it:

Basic functionality:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test with empty list:

    >>> empty_list = MyList()
    >>> empty_list.print_sorted()
    []

Test with negative numbers:

    >>> neg_list = MyList()
    >>> neg_list.append(-1)
    >>> neg_list.append(-5)
    >>> neg_list.append(3)
    >>> neg_list.append(-2)
    >>> neg_list.print_sorted()
    [-5, -2, -1, 3]

Test with duplicate numbers:

    >>> dup_list = MyList()
    >>> dup_list.append(3)
    >>> dup_list.append(1)
    >>> dup_list.append(3)
    >>> dup_list.append(1)
    >>> dup_list.print_sorted()
    [1, 1, 3, 3]

Test with single element:

    >>> single_list = MyList()
    >>> single_list.append(42)
    >>> single_list.print_sorted()
    [42]

Test with strings:

    >>> str_list = MyList()
    >>> str_list.append("banana")
    >>> str_list.append("apple")
    >>> str_list.append("cherry")
    >>> str_list.print_sorted()
    ['apple', 'banana', 'cherry']

Test inheritance from list:

    >>> my_list2 = MyList([4, 1, 3, 2])
    >>> my_list2.print_sorted()
    [1, 2, 3, 4]
    >>> print(my_list2)
    [4, 1, 3, 2]

Test that MyList is a subclass of list:

    >>> issubclass(MyList, list)
    True

Test that instance is of type MyList and list:

    >>> my_list3 = MyList()
    >>> type(my_list3) == MyList
    True
    >>> isinstance(my_list3, list)
    True

Test list methods work:

    >>> my_list4 = MyList([1, 2, 3])
    >>> my_list4.extend([4, 5])
    >>> my_list4.print_sorted()
    [1, 2, 3, 4, 5]
    >>> my_list4.pop()
    5
    >>> my_list4.print_sorted()
    [1, 2, 3, 4]

Test with floats:

    >>> float_list = MyList()
    >>> float_list.append(3.14)
    >>> float_list.append(2.71)
    >>> float_list.append(1.41)
    >>> float_list.print_sorted()
    [1.41, 2.71, 3.14]

Test original list is not modified:

    >>> original = MyList([5, 2, 8, 1])
    >>> original.print_sorted()
    [1, 2, 5, 8]
    >>> original[0]
    5
    >>> original[-1]
    1

Test with mixed integers and floats:

    >>> mixed_list = MyList()
    >>> mixed_list.append(3)
    >>> mixed_list.append(2.5)
    >>> mixed_list.append(1)
    >>> mixed_list.append(4.7)
    >>> mixed_list.print_sorted()
    [1, 2.5, 3, 4.7]

Test very large numbers:

    >>> large_list = MyList()
    >>> large_list.append(999999999)
    >>> large_list.append(1)
    >>> large_list.append(888888888)
    >>> large_list.print_sorted()
    [1, 888888888, 999999999]
